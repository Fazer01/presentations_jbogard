const string serviceName = "MyCompany.MyProduct.MyLibrary";

// logging
using var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddOpenTelemetry(options => options
        .AddConsoleExporter());
});

var logger = loggerFactory.CreateLogger<Program>();
logger.LogInformation("Hello from {country} it's {time}.", "USA", DateTime.Now);


// tracing

ActivitySource MyActivitySource = new(serviceName);

using var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .SetSampler(new AlwaysOnSampler())
    .AddSource(serviceName)
    .AddConsoleExporter()
    .Build();

using var activity = MyActivitySource.StartActivity("SayHello");
activity?.SetTag("foo", 1);
activity?.SetTag("bar", "Hello, World!");
activity?.SetTag("baz", new int[] { 1, 2, 3 });

//metrics

var myMeter = new Meter(serviceName, "1.0");
var myFruitCounter = myMeter.CreateCounter<long>("MyFruitCounter");

using var meterProvider = Sdk.CreateMeterProviderBuilder()
    .AddMeter(serviceName)
    .AddConsoleExporter()
    .Build();

myFruitCounter.Add(1, new("name", "apple"), new("color", "red"));
myFruitCounter.Add(2, new("name", "lemon"), new("color", "yellow"));
myFruitCounter.Add(1, new("name", "lemon"), new("color", "yellow"));
myFruitCounter.Add(2, new("name", "apple"), new("color", "green"));
myFruitCounter.Add(5, new("name", "apple"), new("color", "red"));
myFruitCounter.Add(4, new("name", "lemon"), new("color", "yellow"));



// all done

// See https://aka.ms/new-console-template for more information

using System.Diagnostics;
using System.Diagnostics.Metrics;
using Microsoft.Extensions.Logging;
using OpenTelemetry;
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Trace;

const string serviceName = "MyCompany.MyProduct.MyLibrary";

var myMeter = new Meter(serviceName, "1.0");
var myFruitCounter = myMeter.CreateCounter<long>("MyFruitCounter");

using var meterProvider = Sdk.CreateMeterProviderBuilder()
    .AddMeter(serviceName)
    .AddConsoleExporter()
    .Build();

myFruitCounter.Add(1, new("name", "apple"), new("color", "red"));
myFruitCounter.Add(2, new("name", "lemon"), new("color", "yellow"));
myFruitCounter.Add(1, new("name", "lemon"), new("color", "yellow"));
myFruitCounter.Add(2, new("name", "apple"), new("color", "green"));
myFruitCounter.Add(5, new("name", "apple"), new("color", "red"));
myFruitCounter.Add(4, new("name", "lemon"), new("color", "yellow"));

using var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddOpenTelemetry(options => options
        .AddConsoleExporter());
});

var logger = loggerFactory.CreateLogger<Program>();
logger.LogInformation("Hello from {country} it's {time}.", "USA", DateTime.Now);

ActivitySource MyActivitySource = new(serviceName);

using var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .SetSampler(new AlwaysOnSampler())
    .AddSource(serviceName)
    .AddConsoleExporter()
    .Build();

using var activity = MyActivitySource.StartActivity("SayHello");
activity?.SetTag("foo", 1);
activity?.SetTag("bar", "Hello, World!");
activity?.SetTag("baz", new int[] { 1, 2, 3 });

logger.LogInformation("Hello from {country} it's {time} again.", "USA", DateTime.Now);





var honeycombOptions = context.Configuration.GetHoneycombOptions();

services.AddOpenTelemetry()
    .WithTracing(builder =>
    {
        builder
            .ConfigureResource(resource => resource.AddService(Program.EndpointName))
            .AddHoneycomb(honeycombOptions)
            .AddZipkinExporter(o => { o.Endpoint = new Uri("http://localhost:9411/api/v2/spans"); })
            .AddJaegerExporter(c =>
            {
                c.AgentHost = "localhost";
                c.AgentPort = 6831;
            });
    })
    ;

.AddAspNetCoreInstrumentation()

.AddSqlClientInstrumentation()

endpointConfiguration.EnableOpenTelemetry();

.AddSource("NServiceBus.Core")

.AddHttpClientInstrumentation()

mongoClientSettings.ClusterConfigurator = cb =>
    cb.Subscribe(new DiagnosticsActivityEventSubscriber(
        new InstrumentationOptions
        {
            CaptureCommandText = true
        }));

.AddSource("MongoDB.Driver.Core.Extensions.DiagnosticSources")

mongoClientSettings.ClusterConfigurator = cb =>
    cb.Subscribe(new DiagnosticsActivityEventSubscriber());


.AddSqlClientInstrumentation(opt => opt.SetDbStatementForText = true)

mongoClientSettings.ClusterConfigurator = cb =>
    cb.Subscribe(new DiagnosticsActivityEventSubscriber(
        new InstrumentationOptions
        {
            CaptureCommandText = true
        }));






var activityFeature = HttpContext.Features.Get<IHttpActivityFeature>();

activityFeature?.Activity.AddTag("operation.id", command.Id.ToString());




var activityFeature = HttpContext.Features.Get<IHttpActivityFeature>();

activityFeature?.Activity.AddTag("operation.id", @event.Id.ToString());


AddBaggage

var listener = new ActivityListener
{
    ShouldListenTo = _ => true,
    ActivityStopped = activity =>
    {
        foreach (var (key, value) in activity.Baggage)
        {
            activity.AddTag(key, value);
        }
    }
};
ActivitySource.AddActivityListener(listener);

if (context.Extensions.TryGet(out Activity currentActivity))
{
    currentActivity.AddTag("code.randomvalue", next);
}



.WithMetrics(builder =>
    {
        builder
            .ConfigureResource(resource => resource.AddService(Program.EndpointName))
            .AddAspNetCoreInstrumentation()
            .AddMeter("NServiceBus.Core")
            .AddPrometheusExporter(options =>
            {
                options.ScrapeResponseCacheDurationMilliseconds = 0;
            });
    })


app.UseOpenTelemetryPrometheusScrapingEndpoint();

webHostBuilder.Configure(app =>
{
    app.UseOpenTelemetryPrometheusScrapingEndpoint();
});



            .ConfigureLogging(builder =>
            {
                builder.AddOpenTelemetry(options =>
                {
                    options.AddConsoleExporter();
                });
            })



